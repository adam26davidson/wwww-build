{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StartOptions","className","Grid","container","direction","spacing","justify","alignItems","item","Button","onClick","this","props","handleNewGame","variant","color","size","handleJoinGame","React","Component","ViewSentences","state","sentences","intervalID","codeWasValid","showAuthors","currentSentence","sentencePapers","Array","sentence","sentencePaper","Typography","align","who","response","Chip","label","name","what","where","why","trim","push","getData","clearTimeout","request","method","headers","body","JSON","stringify","type","code","gameCode","console","log","fetch","then","res","json","result","setState","gameState","gameStage","isLoaded","setTimeout","bind","error","i","newIndex","length","message","FormControlLabel","control","Switch","checked","onChange","handleSwitch","makeSentencePapers","IconButton","navigate","FinishedResponses","players","getSentences","player","icon","doneWithQuestions","createPlayers","enterNewCode","EnterResponses","currentQuestion","e","target","value","sendResponse","question","explanation","example","responseText","TextField","id","multiline","event","handleResponseChange","handleNext","endIcon","PlayerWaitingRoom","gameJoined","joinGame","playerId","getPlayerData","noGameFound","goToResponses","Badge","badgeContent","HostWaitingRoom","callCounter","codeExpired","gameCreated","createWaitingRoom","createGame","endGame","startGame","button","newCode","disabled","EnterCode","invalid","playerName","handleCodeChange","String","toUpperCase","slice","input","handleBack","startIcon","EnterName","handleNameChange","Game","onUnload","playerIsHost","leaveGame","playerID","newComponentIsVisible","window","addEventListener","removeEventListener","handleEnterNameBack","handleHostNameNext","handlePlayerNameNext","handleEnterCodeBack","handleEnterCodeNext","beginResponses","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9cfb15e3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport Chip from '@material-ui/core/Chip';\nimport Badge from '@material-ui/core/Badge';\nimport CreateIcon from '@material-ui/icons/Create';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport IconButton from '@material-ui/core/IconButton';\nimport Zoom from '@material-ui/core/Zoom';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport green from '@material-ui/core/colors/green';\n\nclass StartOptions extends React.Component {\n\n  render() {\n    return (\n      <div className=\"start-options\">\n        <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n          <Grid item>\n            <Button \n              onClick={this.props.handleNewGame} \n              variant=\"contained\" \n              color=\"primary\" \n              size=\"large\">\n                Start New Game\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button \n              onClick={this.props.handleJoinGame}\n              variant=\"contained\" \n              color=\"primary\" \n              size=\"large\">\n                Join Game\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n      \n    );\n  }\n}\n\nclass ViewSentences extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sentences: [],\n      intervalID: null,\n      codeWasValid: false,\n      showAuthors: false,\n      currentSentence: 0\n    };\n  }\n\n  makeSentencePapers() {\n    let sentencePapers = Array();\n    for (let sentence of this.state.sentences) {\n      let sentencePaper;\n      if (!this.state.showAuthors) {\n        sentencePaper =\n        <div className=\"single-response\">\n          <Typography variant=\"h5\" align=\"center\">\n            {sentence.who.response.trim() + \" \" +\n            sentence.what.response.trim() + \" \" +\n            sentence.where.response.trim() + \" \" +\n            sentence.why.response.trim()}\n          </Typography>\n        </div>;\n      } else {\n        sentencePaper =\n        <>\n          <div className=\"single-response\">\n            <Typography variant=\"h5\" align=\"center\">{sentence.who.response}</Typography>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.who.name} color=\"primary\"/>\n          </div>\n          \n          <div className=\"single-response\">\n            <Typography variant=\"h5\" align=\"center\">{sentence.what.response}</Typography>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.what.name} color=\"primary\"/>\n          </div>\n\n          <div className=\"single-response\">\n            <Typography variant=\"h5\" align=\"center\">{sentence.where.response}</Typography>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.where.name} color=\"primary\"/>\n          </div>\n\n          <div className=\"single-response\">\n            <Typography variant=\"h5\" align=\"center\">{sentence.why.response}</Typography>\n            <Chip variant=\"outlined\" size=\"small\" label={sentence.why.name} color=\"primary\"/>\n          </div></>;\n      \n    }\n      sentencePapers.push(sentencePaper);\n    }\n    return(sentencePapers);\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  getData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from ViewSentences/getData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            this.setState({codeWasValid: true});\n            if (result.gameState.gameStage == \"sentences-created\") {\n              this.setState({\n                sentences: result.gameState.sentences,\n                isLoaded: true\n              });\n              clearTimeout(this.state.intervalID);\n            } else {\n              let intervalID = setTimeout(this.getData.bind(this), 4000);\n              this.setState({intervalID: intervalID});\n            }\n          } else {\n            this.setState({codeWasValid: false});\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  handleSwitch() {\n    this.setState({showAuthors: !this.state.showAuthors});\n  }\n\n  navigate(i) {\n    const newIndex = (this.state.currentSentence + i) % this.state.sentences.length;\n    this.setState({currentSentence: newIndex});\n  }\n\n  render() {\n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<div>Loading...</div>);\n    } else {\n      if (this.state.codeWasValid) {\n        return(\n          <div className=\"prompt-text\">\n\n              <div className=\"show-authors\">\n                <FormControlLabel \n                  control={\n                    <Switch\n                      checked={this.state.showAuthors}\n                      onChange={() => this.handleSwitch()}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Show Authors\"\n                />\n              </div>\n              \n              <div className=\"sentence\">\n                <div className=\"sentence-inside\" >{this.makeSentencePapers()[this.state.currentSentence]}</div>\n              </div>\n              \n              <div className=\"last-sentence\">\n                <IconButton color=\"primary\" onClick={() => this.navigate(this.state.sentences.length - 1)}>\n                  <NavigateBeforeIcon />\n                </IconButton>\n              </div>\n              \n              <div className=\"next-sentence\">\n                <IconButton color=\"primary\" onClick={() => this.navigate(1)}>\n                  <NavigateNextIcon />\n                </IconButton>\n              </div>\n              \n\n\n          </div>\n        )\n      } else {\n\n      }\n    }\n  }\n}\n\nclass FinishedResponses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n      isLoaded: false,\n      codeWasValid: false,\n      intervalID: null\n    }\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  getSentences() {\n    clearTimeout(this.state.intervalID);\n    this.props.getSentences();\n  }\n\n  getData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from FinishedResponses/getData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            if (result.gameState.gameStage == \"all-players-waiting\" || result.gameState.gameStage == 'sentences-created') {\n              this.getSentences();\n            } else {\n              let intervalID = setTimeout(this.getData.bind(this), 4000);\n              this.setState({\n                players: result.gameState.players,\n                intervalID: intervalID\n              });\n              if(!this.state.isLoaded) {\n                this.setState({\n                  isLoaded: true,\n                  codeWasValid: true\n                })\n              }\n            } \n          } else {\n            this.setState({codeWasValid: false});\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  createPlayers() {\n    let players = Array();\n    for (let player of this.state.players) {\n      let icon;\n      if (player.doneWithQuestions) {\n        icon = <CheckCircleIcon/>\n      } else {\n        icon = <CreateIcon/>\n      }\n      players.push(\n        <Grid item>\n          <Chip icon={icon} label={player.name} color=\"primary\"/>\n        </Grid>\n      );\n    }\n    return(players);\n  }\n\n  render() {\n    \n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<div>Loading...</div>);\n    } else {\n      if (this.state.codeWasValid) {\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h4\" align=\"center\">\n                  Waiting for all players to finish\n                </Typography>\n              </Grid>\n\n              <Grid item>\n                <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"center\">\n                  {this.createPlayers()}\n                </Grid>\n              </Grid>\n\n            </Grid>\n          </div>\n        );\n      } else{\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={4} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >\n                  looks like your game no longer exists\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Button \n                  onClick={() => this.props.enterNewCode()}\n                  variant=\"contained\" \n                  color=\"primary\">\n                  Enter Another Code\n                </Button>\n              </Grid>           \n            </Grid>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nclass EnterResponses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: {\n        name: props.name,\n        who: \"\",\n        what: \"\",\n        where: \"\",\n        why: \"\"\n      },\n      currentQuestion: \"who\"\n    }\n  }\n\n  handleResponseChange(e) {\n    let response = {\n      name: this.props.name,\n      who: this.state.response.who,\n      what: this.state.response.what,\n      where: this.state.response.where,\n      why: this.state.response.why\n    };\n    if (this.state.currentQuestion == \"who\") {\n      response.who = e.target.value;\n    } else if (this.state.currentQuestion == \"what\") {\n      response.what = e.target.value;\n    } else if (this.state.currentQuestion == \"where\") {\n      response.where = e.target.value;\n    } else if (this.state.currentQuestion == \"why\") {\n      response.why = e.target.value;\n    }\n    this.setState({\n      response: response\n    })\n  }\n\n  handleNext() {\n    if (this.state.currentQuestion == \"who\") {\n      this.setState({currentQuestion: \"what\"});\n    } else if (this.state.currentQuestion == \"what\") {\n      this.setState({currentQuestion: \"where\"});\n    } else if (this.state.currentQuestion == \"where\") {\n      this.setState({currentQuestion: \"why\"});\n    } else if (this.state.currentQuestion == \"why\") {\n      this.props.sendResponse(this.state.response);\n    }\n  }\n\n  render() {\n    let question;\n    let explanation;\n    let example;\n    let pronounStuff;\n    let responseText;\n    if (this.state.currentQuestion == \"who\") {\n      responseText = this.state.response.who\n      question = \"WHO\";\n      explanation = \"enter any person or animal etc\";\n      example = \" eg. 'Obama' or 'Obama's dog, Bo'\";\n      pronounStuff = <div></div>;\n    } else if (this.state.currentQuestion == \"what\") {\n      responseText = this.state.response.what\n      question = \"WHAT\";\n      explanation = \"enter an action\";\n      example = \" eg. 'went for a bike ride' or 'slept'\";\n      pronounStuff = \n        <Typography variant=\"body1\">\n          tip: if you want to write something like 'went to HER appartment', you could enter\n          'went to THEIR appartment' instead to make the final sentence make more sense. \n          (they / them / their / theirs / themself)\n        </Typography>;\n    } else if (this.state.currentQuestion == \"where\") {\n      responseText = this.state.response.where\n      question = \"WHERE\";\n      explanation = \"enter where, when or how the thing happened \"\n      example = \" eg. 'on their birthday' or 'with Batman'\";\n      pronounStuff = \n        <Typography variant=\"body1\">\n          tip: if you want to write something like 'with HIS uncle', you could enter\n          'with THEIR uncle' instead to make the final sentence make more sense. \n          (they / them / their / theirs / themself)\n        </Typography>;\n    } else if (this.state.currentQuestion == \"why\") {\n      responseText = this.state.response.why\n      question = \"WHY\"\n      explanation = \"enter an explanation or other clause\";\n      example = \" eg. 'because they wanted to.' or 'in order to protect baby yoda.'\";\n      pronounStuff =\n        <Typography variant=\"body1\">\n          tip: if you want to write something like 'because SHE WAS sad', you could enter\n          'because THEY WERE sad' instead to make the final sentence make more sense. \n          (they / them / their / theirs / themself)\n        </Typography>\n    }\n    return(\n      <div className=\"prompt-text\">\n        <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n\n          <Grid item>\n            <Grid container direction=\"column\" spacing={1} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h3\" align=\"center\">{question}</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body2\" align=\"center\">{explanation}</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" align=\"center\">{example}</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <TextField \n              id=\"standard-basic\" \n              label={question} \n              multiline\n              onChange={(event) => this.handleResponseChange(event)}\n              value={responseText}\n            />\n          </Grid>\n\n          <Grid item>\n            <Button \n              onClick={() => this.handleNext()}\n              variant=\"contained\" \n              color=\"primary\" \n              endIcon={<NavigateNextIcon/>}>\n                Next\n            </Button>\n          </Grid>\n\n        </Grid>\n      </div>\n    );\n  }\n}\n\nclass PlayerWaitingRoom extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      players: [],\n      codeWasValid: false,\n      intervalID: null\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.gameJoined) {\n      this.joinGame();\n    } else {\n      this.getData();\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  joinGame() {\n    let body = JSON.stringify(\n      {\n        type: \"enter-waiting-room\",\n        name: this.props.name,\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from PlayerWaitingRoom/joinGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            this.props.joinGame(result.playerId);\n            this.setState({\n              isLoaded: true,\n              players: result.gameState.players,\n              codeWasValid: true,\n            });\n            this.getPlayerData()\n          } else {\n            this.props.noGameFound();\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  goToResponses() {\n    clearTimeout(this.state.intervalID);\n    this.props.goToResponses()\n  }\n\n  getPlayerData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.props.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from PlayerWaitingRoom/getPlayerData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.codeWasValid) {\n            let intervalID = setTimeout(this.getPlayerData.bind(this), 4000);\n            this.setState({\n              players: result.gameState.players,\n              intervalID: intervalID\n            });\n            if (result.gameState.gameStage == \"in-progress\") {\n              this.goToResponses();\n            } \n            \n          } else {\n            this.setState({\n              codeWasValid: false\n            });\n          }\n        },\n        (error) => {\n          this.setState({\n            error: error\n          });\n        }\n      );\n  }\n\n  createPlayers() {\n    let players = Array();\n    for (let player of this.state.players) {\n      if (player.id == \"1\") {\n        players.push(\n          <Grid item>\n            <Badge badgeContent=\"Host\" color=\"secondary\">\n              <Chip label={player.name} color=\"primary\"/>\n            </Badge>\n          </Grid>\n        );\n      } else {\n        players.push(\n          <Grid item>\n            <Chip label={player.name} color=\"primary\"/>\n          </Grid>\n        );\n      }\n    }\n    return(players);\n  }\n\n  render() {\n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<div>Loading...</div>);\n    } else {\n      if (this.state.codeWasValid) {\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n\n              <Grid item>\n                <Typography variant=\"h4\" align=\"center\" >\n                  You're in the waiting room! \n                </Typography>\n              </Grid>\n\n              <Grid item>\n                <Grid container direction=\"column\" spacing={2} justify=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography variant=\"subtitle1\" align=\"center\" >players:</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"center\">\n                      {this.createPlayers()}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >\n                  {\"game: \" + this.props.gameCode}\n                </Typography>\n              </Grid>\n\n            </Grid>\n          </div>\n        );\n      } else {\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={4} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >\n                  That game no longer exists (the host could have lost connection)\n                </Typography>\n              </Grid>\n              <Grid item>\n              <Button \n                onClick={() => this.props.enterNewCode()}\n                variant=\"contained\" \n                color=\"primary\" >\n                Enter Another Code\n              </Button>\n\n              </Grid>\n              \n            </Grid>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nclass HostWaitingRoom extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      players: Array(),\n      code: \"\",\n      callCounter: 0,\n      codeExpired: false,\n      intervalID: null\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.intervalID);\n  }\n\n  componentDidMount() {\n    if (!this.props.gameCreated) {\n      this.createWaitingRoom();\n    } else {\n      this.getData()\n    }\n  }\n\n  createWaitingRoom() {\n    let body = JSON.stringify(\n      {\n        type: \"create-waiting-room\",\n        name: this.props.name\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from HostWaitingRoom/createWaitingRoom');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.props.createGame(result.gameState, result.playerId);\n          let intervalID = setTimeout(this.getData.bind(this), 4000);\n          this.setState({\n            isLoaded: true,\n            code: result.gameState.code,\n            players: result.gameState.players,\n            intervalID: intervalID\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  getData() {\n    let body = JSON.stringify(\n      {\n        type: \"get-game-state\",\n        code: this.state.code\n      }\n    )\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from HostWaitingRoom/getData');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            players: result.gameState.players,\n            callCounter: this.state.callCounter + 1\n          });\n          if (this.state.callCounter < 600) {\n            let intervalID = setTimeout(this.getData.bind(this), 4000);\n            this.setState({intervalID: intervalID});\n          } else {\n            this.setState({\n              codeExpired: true\n            })\n            this.props.endGame();\n          }\n        },\n        (error) => {\n          this.setState({\n            error: error\n          });\n        }\n      );\n  }\n\n  newCode() {\n    this.setState({\n      codeExpired: false,\n      callCounter: 0,\n      isLoaded: false,\n    });\n    this.createWaitingRoom()\n  }\n\n  createPlayers() {\n    let players = Array();\n    for (let player of this.state.players) {\n      if (player.id == \"1\") {\n        players.push(\n          <Grid item>\n            <Badge badgeContent=\"Host\" color=\"secondary\">\n              <Chip label={player.name} color=\"primary\"/>\n            </Badge>\n          </Grid>\n        );\n        \n      } else {\n        players.push(\n          <Grid item>\n            <Chip label={player.name} color=\"primary\"/>\n          </Grid>\n        )\n      }\n    }\n    return(players)\n  }\n\n  startGame() {\n    clearTimeout(this.state.intervalID);\n    this.props.startGame();\n  }\n\n  render() {\n    if (this.state.error) {\n      return (<div>Error: {this.state.error.message}</div>);\n    } else if (!this.state.isLoaded) {\n      return(<div>Loading...</div>);\n    } else {\n      if (!this.state.codeExpired) {\n        let button;\n        if (this.state.players.length > 1) {\n          button = \n            <Button \n              onClick={() => this.startGame()}\n              variant=\"contained\" \n              color=\"primary\" >\n              Start Game\n            </Button>\n        } else {\n          button = \n            <Button \n              disabled\n              onClick={() => this.startGame()}\n              variant=\"contained\" \n              color=\"primary\" >\n              Start Game\n            </Button>\n        }\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={4} justify=\"center\" alignItems=\"center\">\n\n              <Grid item>\n                <Grid container direction=\"column\" spacing={1} justify=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography variant=\"h5\" align=\"center\" >Your Game Code is:</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"h3\" align=\"center\" >{this.state.code}</Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item>\n                <Grid container direction=\"column\" spacing={2} justify=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography variant=\"subtitle1\" align=\"center\" >players:</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"center\">\n                      {this.createPlayers()}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item>\n                {button}\n              </Grid>\n                \n            </Grid>\n          </div>\n        );\n      } else {\n        return(\n          <div className=\"prompt-text\">\n            <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h5\" align=\"center\" >Your game code has expired</Typography>\n              </Grid>\n              <Grid item>\n              <Button \n                  onClick={() => this.newCode()}\n                  variant=\"contained\" \n                  color=\"primary\" \n                  >\n                    Get New Code\n                </Button>\n              </Grid>\n            </Grid>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nclass EnterCode extends React.Component {\n\n  constructor(props) {\n    super(props);\n    let message;\n    if (props.invalid) {\n      message = \"Sorry \" + props.playerName + \", the code you entered is invalid.\";\n    } else {\n      message = \"How's it goin \" + props.playerName + \", Enter your game's 4 letter code\";\n    }\n    this.state = {\n      code: '',\n      message: message\n    };\n    props.handleCodeChange('');\n  }\n\n  handleCodeChange(event) {\n    let code = String(event.target.value);\n    code = code.toUpperCase();\n    if (code.length > 4) {\n      code = code.slice(0, 4);\n    }\n    this.setState({code: code});\n    this.props.handleCodeChange(code);\n  }\n\n  render() {\n\n    let input;\n    if (!this.props.invalid) {\n      input = <TextField \n        id=\"standard-basic\" \n        label=\"code\" \n        onChange={(e) => this.handleCodeChange(e)}\n        value={this.state.code}\n      />\n    } else {\n      input = <TextField \n        error\n        id=\"standard-basic\" \n        label=\"invalid code\" \n        onChange={(e) => this.handleCodeChange(e)}\n        value={this.state.code}\n      />\n    }\n\n    return(\n      <div className=\"enter-game-code\">\n        <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n          <Grid item>\n            <div className=\"prompt-text\">\n              <Typography variant=\"h5\" align=\"center\" >{this.state.message}</Typography>\n            </div>\n          </Grid>\n          <Grid item>\n             {input}\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"row\" spacing={7} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Button \n                  onClick={this.props.handleBack}\n                  variant=\"contained\" \n                  color=\"primary\" \n                  startIcon={<NavigateBeforeIcon/>}>\n                    Back \n                </Button>\n              </Grid>\n              <Grid item>\n                <Button \n                  onClick={this.props.handleNext}\n                  variant=\"contained\" \n                  color=\"primary\" \n                  endIcon={<NavigateNextIcon/>}>\n                    Next\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n  \n}\n\nclass EnterName extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {name: \"\"};\n    props.handleNameChange(\"\")\n  }\n\n  handleNameChange(event) {\n    this.setState({name: event.target.value});\n    this.props.handleNameChange(event.target.value)\n  }\n\n  render() {\n    let input;\n    if (!this.props.invalid) {\n      input = <TextField \n        id=\"standard-basic\" \n        label=\"Enter Your Name\" \n        onChange={(event) => this.handleNameChange(event)}\n        value={this.state.name}\n      />;\n    } else {\n      input = <TextField \n        error\n        id=\"standard-basic\" \n        label=\"name is required\" \n        onChange={(event) => this.handleNameChange(event)}\n        value={this.state.name}\n      />\n    }\n    return(\n      <div className=\"enter-host-name\">\n        <Grid container direction=\"column\" spacing={5} justify=\"center\" alignItems=\"center\">\n          <Grid item>\n            <div className=\"prompt-text\">\n              <Typography variant=\"h5\" align=\"center\" >{this.props.message}</Typography>\n            </div>\n          </Grid>\n          <Grid item>\n              {input}\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"row\" spacing={7} justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Button \n                  onClick={this.props.handleBack}\n                  variant=\"contained\" \n                  color=\"primary\" \n                  startIcon={<NavigateBeforeIcon/>}>\n                    Back \n                </Button>\n              </Grid>\n              <Grid item>\n                <Button \n                  onClick={this.props.handleNext}\n                  variant=\"contained\" \n                  color=\"primary\" \n                  endIcon={<NavigateNextIcon/>}>\n                    Next\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n  \n}\n\nclass Game extends React.Component { \n  constructor(props) {\n    super(props)\n    this.state = {\n      gameState: \"start-options\",\n      playerName: \"\",\n      gameCode: \"\",\n      playerIsHost: false,\n      gameCreated: false,\n      gameJoined: false,\n      playerID: 0,\n      newComponentIsVisible: false\n    }\n  }\n\n  onUnload = e => {\n    if (this.state.playerIsHost && this.state.gameCreated) {\n      this.endGame();\n    } else if (!this.state.playerIsHost && this.state.gameJoined) {\n      this.leaveGame();\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", this.onUnload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"beforeunload\", this.onUnload);\n  }\n\n  handleNewGame() {\n    this.setState({\n      gameState: \"enter-host-name\",\n      playerIsHost: true\n    });\n  }\n\n  handleJoinGame() {\n    this.setState({\n      gameState: \"enter-player-name\",\n      playerIsHost: false\n    });\n  }\n\n  handleEnterNameBack() {\n    this.setState({gameState: \"start-options\"});\n  }\n\n  handleHostNameNext() {\n    if (this.state.playerName != \"\") {\n      this.setState({gameState: \"host-waiting-room\"})\n    } else {\n      this.setState({gameState: \"invalid-host-name\"})\n    }\n  }\n\n  handlePlayerNameNext() {\n    if (this.state.playerName != \"\") {\n      this.setState({gameState: \"enter-game-code\"})\n    } else {\n      this.setState({gameState: \"invalid-player-name\"});\n    }\n  }\n\n  handleEnterCodeBack() {\n    this.setState({gameState: \"enter-player-name\"})\n  }\n\n  handleEnterCodeNext() {\n    if (this.state.gameCode.length == 4) {\n      this.setState({gameState: \"player-waiting-room\"})\n    } else {\n      this.setState({gameState: \"invalid-code\"})\n    }\n  }\n\n  handleNameChange(name) {\n    this.setState({playerName: name});\n  }\n\n  handleCodeChange(code) {\n    this.setState({gameCode: code});\n  }\n\n  joinGame(playerID) {\n    this.setState({\n      playerID: playerID,\n      gameJoined: true\n    });\n    console.log(this.state.playerID);\n  }\n\n  enterNewCode() {\n    this.setState({\n      playerID: 0,\n      gameJoined: false,\n      gameCode: \"\",\n      gameState: \"enter-game-code\"\n    });\n  }\n\n  createGame(gameState, playerID) {\n    this.setState({\n      gameCode: gameState.code,\n      playerID: playerID,\n      gameCreated: true\n    })\n  }\n\n  beginResponses() {\n    this.setState({gameState: \"enter-responses\"});\n  }\n\n  startGame() {\n    this.setState({\n      gameState: 'enter-responses'\n    });\n    let body = JSON.stringify(\n      {\n        type: \"start-game\",\n        code: this.state.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from Game/startGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {},\n        (error) => {}\n      );\n  }\n\n  sendResponse(response) {\n    let body = JSON.stringify(\n      {\n        type: \"post-response\",\n        playerId: this.state.playerID,\n        response: response,\n        code: this.state.gameCode,\n        name: this.state.playerName\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from Game/sendResponse');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {},\n        (error) => {}\n      );\n    this.setState({gameState: \"finished-responses\"});\n  }\n\n  getSentences() {\n    if (this.state.playerIsHost) {\n      let body = JSON.stringify(\n        {\n          type: \"create-sentences\",\n          code: this.state.gameCode,\n        }\n      );\n      const request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      };\n      console.log('request sent from Game/getSentences');\n      fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n        .then(res => res.json())\n        .then(\n          (result) => {},\n          (error) => {}\n        );\n    }\n    this.setState({gameState: \"view-sentences\"});\n  }\n\n  endGame() {\n    let body = JSON.stringify(\n      {\n        type: \"end-game\",\n        code: this.state.gameCode\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from Game/endGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            gameCreated: false,\n            gameCode: \"\",\n        });}\n        ,\n        (error) => {}\n      );\n    \n  }\n\n  leaveGame() {\n    let body = JSON.stringify(\n      {\n        type: \"leave-game\",\n        code: this.state.gameCode,\n        playerId: this.state.playerID\n      }\n    );\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: body\n    };\n    console.log('request sent from Game/endGame');\n    fetch('https://us-central1-to-do-list-266601.cloudfunctions.net/wwww', request)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            gameJoined: false,\n            gameCode: \"\",\n          });\n        },\n        (error) => {}\n      );\n    \n  }\n\n  render() {\n    if (this.state.gameState == \"start-options\") {\n      return(\n          <StartOptions \n            handleNewGame={() => this.handleNewGame()} \n            handleJoinGame={() => this.handleJoinGame()}\n          />\n        );\n    } else if (this.state.gameState == \"enter-host-name\") {\n      return(\n        <EnterName \n          message=\"You're the game host!\" \n          invalid={false}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handleHostNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n\n    } else if (this.state.gameState == \"enter-player-name\") {\n      return(\n        <EnterName \n          message=\"Enter whatever you want really\" \n          invalid={false}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handlePlayerNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n    } else if (this.state.gameState == \"enter-game-code\") {\n      return(\n        <EnterCode \n          playerName={this.state.playerName}\n          invalid={false}\n          handleBack={() => this.handleEnterCodeBack()}\n          handleNext={() => this.handleEnterCodeNext()}\n          handleCodeChange={(code) => this.handleCodeChange(code)}\n        />);\n    } else if (this.state.gameState == \"invalid-player-name\") {\n      return(\n        <EnterName\n          message=\"You can type literally anything except for that.\"\n          invalid={true}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handlePlayerNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n    } else if (this.state.gameState == \"invalid-code\") {\n      return(\n        <EnterCode \n            playerName={this.state.playerName}\n            invalid={true}\n            handleBack={() => this.handleEnterCodeBack()}\n            handleNext={() => this.handleEnterCodeNext()}\n            handleCodeChange={(code) => this.handleCodeChange(code)}\n        />);\n    } else if (this.state.gameState == \"invalid-host-name\") {\n      return(\n        <EnterName \n          message=\"You have to have a name\" \n          invalid={true}\n          handleBack={() => this.handleEnterNameBack()}\n          handleNext={() => this.handleHostNameNext()}\n          handleNameChange={(name) => this.handleNameChange(name)}\n        />);\n    } else if (this.state.gameState == \"host-waiting-room\") {\n      return(\n        <HostWaitingRoom\n          gameCreated={this.state.gameCreated}\n          name={this.state.playerName}\n          createGame={(gameState, playerID) => this.createGame(gameState, playerID)}\n          endGame={() => this.endGame()}\n          newCode={() => this.handleHostNameNext()}\n          startGame={() => this.startGame()}\n        />\n      );\n    } else if (this.state.gameState == \"player-waiting-room\") {\n      return(\n        <PlayerWaitingRoom\n          gameCode={this.state.gameCode}\n          name={this.state.playerName}\n          gameJoined={this.state.gameJoined}\n          joinGame={(playerID) => this.joinGame(playerID)}\n          noGameFound={() => this.setState({gameState: \"invalid-code\"})}\n          goToResponses={() => this.beginResponses()}\n          enterNewCode={() => this.enterNewCode()} />\n      );\n    } else if (this.state.gameState == \"enter-responses\") {\n      return(\n        <EnterResponses\n          name={this.state.playerName}\n          sendResponse={(response) => this.sendResponse(response)}/>\n      );\n    }  else if (this.state.gameState == \"finished-responses\")  {\n      return(\n        <FinishedResponses\n          gameCode={this.state.gameCode}\n          getSentences={() => this.getSentences()}\n          enterNewCode={() => this.enterNewCode()}/>\n      )\n    } else if (this.state.gameState == \"view-sentences\") {\n      return(\n        <ViewSentences gameCode={this.state.gameCode}/>\n      )\n    }\n  }\n\n}\n\nfunction App() {\n  return (\n    <div className=\"whole-window\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}